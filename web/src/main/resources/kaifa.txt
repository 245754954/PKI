resources：
    static存放静态资源例如：css js,images等
    templates存放页面模板，该目录下面的资源一定是需要controller跳转才可以访问的
    public：存放公共资源，例如header.jsp,footer.jsp
    resources:存放upload上传的文件，或者需要下载的文件

resources下面的四个目录都是可见的，项目部署好了以后文件就存放在classpath（也就是/目录）下面：
其中resources下面的resources优先级最高，其次static，再其次是public，public和static以及resouces目录下的文件
都是/目录，不需用访问的时候添加/public/ /static/等前缀，直接/就好了

1) 如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，或者html，配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。

2)我们将web工程的字目录称之为./file/，java和resources目录下的都称之为classpath，放在resources目录下的文件springboot都会找的到，就相当于在classpath路径
对于springboot配置文件可以放在四个地方，./file/config/  , ./file/  , classpath/config/ , classpath/这四个的优先级依次降低，如果配置文件在这四个目录
下面都有，那么springboot自动选择高优先级目录下的配置文件启动

3)测试相关事项
@RunWith(SpringRunner.class)
@SpringBootTest(classes=AppServerApplication.class)
//这两个注解代表我们将使用springboot提供的方式进行单元测试，好处是在这个测试类中如果我们需要使用
//容器中任何已有的bean，我们只需用使用@Autowired注入就好了，如下 ：我们需要使用容器中person这个bean
//我们只需用进行如下主节
//@Autowired
//    Person person;

4)@Component
用于将某个bean加入到容器中

5)@Configuration 和@Bean配合使用
详细作用请参考MyAppConfig类，
//springboot中，配置类我们使用@configuration注解，代表这个类是一个配置类
//配置类其实就相当于配置文件，配置类用来代替配置文件，在配置类中我们使用@Bean将某个组件加入到容器中
//通常@Bean将方法的返回值注入到容器中，容器中这个组件默认的id就是方法的名称

6)@Bean//给容器添加一个ContextSource组件
  @ConditionalOnMissingBean(ContextSource.class)//如果容器中没有这个组件在添加，如果有了就不再添加了

7)//将yml文件中配置的属性值映射到这个bean中
  //我们需要使用到一个注解@ConfigurationProperties，这个注解的作用就是告诉springboot，这个对象
  //里边属性的值都是来自于配置文件,这个prefix代表我们从配置文件里边的person开始逐步向下映射
  //映射完毕以后我们还需要将这个bean添加到容器中，我们还需要使用一个主节，@component
  @Component//用于将这个bean注入到容器
  //从全局配置文件中找前缀为person的属性，依次注入本对象，如果属性值不在全局配置文件中，则需要手动指定从哪个配置文件取值，使用@@PropertySource注解
  @ConfigurationProperties(prefix = "person")

8)//#这个配置文件的作用是用来演示，bean如何加载非全局配置文件里边的属性值
  //        #读取非全局配置文件的属性值，我们需要使用三个注解，第一个PropertySource用于指定当前bean的赋值采用
  //        #哪个配置文件，第二个@ConfigurationProperties，用于指定属性值映射的方式
  //        #@component用于将当前bena加载到容器里边
  @PropertySource(value = {"classpath:bird.properties"})//用于加载指定的配置文件
  @Component//将bean注入到容器
  @ConfigurationProperties(prefix = "bird")//属性映射匹配规则

9)themleaf的常用标签
th:text   th:untext  th:if  th:insert  th:each   th:attr   th:remove
themleaf的取值

10)spring-boot-autoconfigure，spring-boot在初始化的时候会向容器里边添加许多自动配置的bean，这些bean的配置原则是：如果
有用户通过@Bean标签加入某个组件，那么就不再自动配置，如果没有某个组件才进行自动配置

11)@Bean标签用于将组件注册到容器中


13）webjars的使用
现在伴随着各种前端框架的流行，出现了easyui,bootstrap,angularjs等等，我们每次
使用别人的模板都会导入一大堆的js，css文件，但是这类文件是公共的，我们很难整理，因此
我们就是用maven提供的webjar依赖来导入一些公共的资源，然后直接在模板中按照规则引用样式文件
具体的使用方法可以参考templates/clerk/index.html文件

14)我们写方法映射的时候每次这样写@RequestMapping(value = "/dashboard",method = RequestMethod.POST)太长太麻烦，下面有更简单的方式
   @DeleteMapping(value = "")
   @PutMapping(value = "")
   @GetMapping(value = "")
   @PostMapping(value = "/dashboard")//代表我们要映射一个post请求

15)@RequestParam("username")String username,@RequestParam("password")String password
上面代表要从用户的请求中获取参数username，和password的值，然后分别赋值给参数，如果没有参数提交就会报错

16)学会书写自己的拦截器，拦截某写url，并且做一些日志处理，并且将自己写好的拦截器，注入到容器里边

17)Restful风格和普通的风格之间区别
普通的url，要进行增加，删除，修改我们通常都采用不同的url来进行区分，例如添加/addUser,删除/deleteUser，修改/updateUser
但hi再Restful风格中，我们希望无论是增加还是修改，还是删除他们的方法都是一样的，只是请求方式不一样，例如/user Get方法代表添加
/user Delete方法代表删除，  /user  Put方法代表添加，也就是说方法名字都一样，至于进行什么操作那是由请求方式决定的


18)th:fragment=“topbar” th:insert="~{clerk/header::topbar}"
th:insert  th:replcae   th:include之间的区别

th:insert用于将公共片段整个插入到指定元素种

th:replace将引入的元素替换掉引入的标签

th:include 去掉引入的标签，只要他的内容
通常我们只需要replace就好了


//redirect:/clerk/emps表示重定向到一个地址
//forward:/clerk/emps表示转发到一个地址



19)
@RespondBody表示返回给客户端json格式的数据
@RequestMapping(produces="text/html")表示返回给客户端html数据


20)springboot的错误处理机制
我们可以再template下面error文件夹下面写自己的错误页面，一旦状态码是404，那么springboot就会
跳转到/themplate/error/404.html页面，如果是服务器500错误那么springboot就会跳转到/themplate/error/500.html页面
如果写成/themplate/error/4xx.html，那么就凡是4开头的错误，都会显示/themplate/error/4xx.html，也就相当于正则匹配
，我们可以在错误页面取出相关的错误，消息的类型有下面几种
                                    <h1>status:[[${status}]]</h1>
                 					<h2>timestamp:[[${timestamp}]]</h2>
                 					<h2>error:[[${error}]]</h2>
                 					<h2>exception:[[${exception}]]</h2>
                 					<h2>message:[[${message}]]</h2>
当然我们也可以再static目录下，定制错误页面，/static/error/4xx.html,但是static目录下无法使用模板引擎，我们一般还是将定制的错误页面放在
themplate/error下面


21)springboot如何与关系数据库进行交互
第一种：使用原生jdbc进行数据访问
<!--访问mysql的驱动，无论使用哪种技术都是需要驱动的
我们常常听见各种数据库访问技术，例如jdbc原生技术(jdbcTemplate)，mybatis框架，hibernate框架等等，JPA技术等
下面我们将理一理他们之间的关系：

首先访问数据库都需要数据库连接驱动，mysql有mysql-connector驱动，oracle有oracle-connector驱动，也就是选择的数据库铲平不同
那么数据库的驱动也不同

有了数据库驱动以后，我们还需要响应的连接池技术，因为每次访问数据库都去连接，速度太慢，而且不太方便，不利于代码重构，后来就出现了相应的连接池技术，连接池技术
也多种多样，如DBCP，C3P0，Druid，tomcat连接池等等，但是最常使用的连接池技术是阿里巴巴的druid

有了连接池以后，我们操作数据库可以采用原生的jdbcTemplate，当然也可以采用mybatis，或者hibernate等框架，这些在底层连接数据库的时候都是采用了数据库连接池
他们无论上层操作的方式有多么不同，底层连接数据库一定是采用了连接池技术，但是具体是哪种连接池技术，可以多种多样

JPA是在mybatis或者hibernate之上的又一层封装
-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <!--第一种方式，采用原生jdbc访问数据库-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>

22)springboot的安全技术，例如访问控制与授权
安全框架目前主流的又apache的shiro和spring的spring security
1:在pom种引入spring-security依赖
2：编写spring-security的配置类@EnableWebSecurity//开启security注解
                       public class MySecurityConfig extends WebSecurityConfigurerAdapter
3：控制请求的访问权限


23)常见的注解
@Data : 注解在类上, 为类提供读写属性, 此外还提供了 equals()、hashCode()、toString() 方法
@Getter/@Setter : 注解在类上, 为类提供读写属性
@ToString : 注解在类上, 为类提供 toString() 方法
@Slf4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象
@Log4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象



